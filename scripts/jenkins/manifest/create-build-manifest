#!/usr/bin/env python

import json
import xml.etree.ElementTree as ET
import argparse
import sys
from subprocess import call, check_call, check_output
import os
import io
import shutil
from datetime import datetime
import time
import tarfile

# Most of this script is involved with computing important values
# for producing a new manifest. These important values are represented
# as all-caps CONSTANTS once they are finally set.



# Command-line args
parser = argparse.ArgumentParser()
parser.add_argument("manifest", type=str, help="manifest path")
parser.add_argument("--no-push", action="store_true",
                    help="Don't push final build manifest")
parser.add_argument("-p", "--manifest-project", type=str,
                    default="git://github.com/couchbase/manifest",
                    help="Alternate git URL for manifest repository")
parser.add_argument("--build-manifests-org", type=str, default="couchbase",
                    help="Alternate github.com organization for build-team-manifests")
parser.add_argument("--force", action="store_true",
                    help="Produce new build manifest even if no repo changes")
args = parser.parse_args()
MANIFEST = args.manifest
MANIFEST_PROJECT = args.manifest_project
BUILD_MANIFESTS_ORG = args.build_manifests_org
NO_PUSH = args.no_push
force = args.force

# Initialize output files
properties_filename = os.path.abspath("build.properties")
if os.path.exists(properties_filename):
  os.remove(properties_filename)
json_filename = os.path.abspath("build-properties.json")
if os.path.exists(json_filename):
  os.remove(json_filename)
manifest_filename = os.path.abspath("build-manifest.xml")
if os.path.exists(manifest_filename):
  os.remove(manifest_filename)
tarball_filename = os.path.abspath("source.tar.gz")
if os.path.exists(tarball_filename):
  os.remove(tarball_filename)

# Determine product and release from manifest path
PRODUCT, _, MANIFEST_PATH = MANIFEST.partition('/')
if MANIFEST_PATH is '':
  # For legacy reasons, "top-level" manifests are couchbase-server
  PRODUCT="couchbase-server"
  MANIFEST_PATH=MANIFEST

# Sync manifest project
if not os.path.isdir("manifest"):
  check_call(["git", "clone", MANIFEST_PROJECT, "manifest"])
os.chdir("manifest")
print "Updating manifest repository..."
check_call(["git", "pull"])

# Verify and open input manifest
if not os.path.exists(MANIFEST):
  print "Manifest '{}' does not exist!".format(MANIFEST)
  sys.exit(3)
input_manifest = ET.parse(MANIFEST)

# Load configuration JSON file for project, if any
product_config_filename = "{}/product-config.json".format(PRODUCT)
if os.path.exists(product_config_filename):
  with io.open(product_config_filename) as product_config_file:
    product_config = json.load(product_config_file)
else:
  product_config = {}

# Override PRODUCT if specified in product-config.json
PRODUCT = product_config.get("product", PRODUCT)

# Load manifest metadata from JSON, if any
manifests = product_config.get("manifests")
if manifests is not None and MANIFEST in manifests:
  manifest_config = manifests[MANIFEST]
else:
  manifest_config = {}

# Set values from branch config or defaults
PRODUCT_BRANCH = manifest_config.get("branch", "master")
START_BUILD = manifest_config.get("start_build", 1)
TYPE = manifest_config.get("type", "production")
PARENT = manifest_config.get("parent")
if PARENT is not None:
  PARENT_BRANCH = manifests[PARENT].get("branch", "master")
else:
  PARENT_BRANCH = "master"

# Set values from input manifest or defaults
build_element = input_manifest.find("./project[@name='build']")
if build_element is None:
  print "ERROR: input manifest {} has no 'build' project!".format(MANIFEST)
  sys.exit(4)
version_annot = build_element.find("annotation[@name='VERSION']")
if version_annot is not None:
  VERSION = version_annot.get("value")
  print "Input manifest version: {}".format(VERSION)
else:
  VERSION = "0.0.0"
  print "Default to version 0.0.0"
RELEASE = manifest_config.get("release")
if RELEASE is None:
  RELEASE = VERSION

# At last, we are ready to pull the source code. Clean out old
# source directories, leaving just .repo to avoid needing to suck
# everything down from github again.
os.chdir("..")
if not os.path.isdir(PRODUCT):
  os.mkdir(PRODUCT)
os.chdir(PRODUCT)
for entry in [f for f in os.listdir(".") if f != ".repo"]:
  shutil.rmtree(entry) if os.path.isdir(entry) else os.remove(entry)
check_call(["repo", "init", "-u", "../manifest", "-g", "all", "-m", MANIFEST])
check_call(["repo", "sync", "--jobs=6"])

# Sync build-team-manifests project and checkout/create PRODUCT_BRANCH
os.chdir("..")
if not os.path.isdir("build-team-manifests"):
  check_call(["git", "clone",
    "ssh://git@github.com/{}/build-team-manifests".format(BUILD_MANIFESTS_ORG)])
os.chdir("build-team-manifests")
check_call(["git", "reset", "--hard"])
print "Updating build-team-manifests repository..."
check_call(["git", "fetch", "--all"])
branch_exists = call(["git", "show-ref", "--verify", "--quiet",
  "refs/remotes/origin/{}".format(PRODUCT_BRANCH)])
if branch_exists == 0:
  check_call(["git", "checkout", "-B", PRODUCT_BRANCH,
    "remotes/origin/{}".format(PRODUCT_BRANCH)])
else:
  check_call(["git", "checkout", "-b", PRODUCT_BRANCH, PARENT_BRANCH])

# Extract previous build number from last build manifest, if any
build_manifest_filename = os.path.abspath(
  "{}/{}.xml".format(PRODUCT, RELEASE))
LAST_BUILD_NUM = 0
if os.path.exists(build_manifest_filename):
  last_build_manifest = ET.parse(build_manifest_filename)
  last_build_num_annot = last_build_manifest.find(
    "./project[@name='build']/annotation[@name='BLD_NUM']")
  if last_build_num_annot is not None:
    LAST_BUILD_NUM = int(last_build_num_annot.get("value"))
os.chdir("..")

# Now we can at last determine the build number of this new build.
BLD_NUM = max(LAST_BUILD_NUM + 1, START_BUILD)

# See if there are changes since the last build, unless --force specified
os.chdir(PRODUCT)
if (os.path.exists(build_manifest_filename)):
  output = check_output(["repo", "diffmanifests", build_manifest_filename])
  if (len(output) == 0):
    if (not force):
      print "No changes since last build {}-{}; not executing new build".format(
        VERSION, LAST_BUILD_NUM)
      with open(json_filename, "w") as prop:
        json.dump({}, prop)
      with open(properties_filename, "w") as prop:
        prop.write("")
      sys.exit(0)
    else:
      print "No changes since last build {}-{}, but forcing new build anyway".format(
        VERSION, LAST_BUILD_NUM)

# Ensure build manifest directory exists
build_manifest_dir = os.path.dirname(build_manifest_filename)
if not os.path.isdir(build_manifest_dir):
  os.makedirs(build_manifest_dir)

# Create the new build manifest and insert all variables
def insert_child_annot(parent, name, value):
  annot = ET.Element("annotation")
  annot.set("name", name)
  annot.set("value", value)
  annot.tail = "\n    "
  parent.insert(0, annot)

print "Updating build manifest {}".format(build_manifest_filename)
with open(build_manifest_filename, "w") as f:
  check_call(["repo", "manifest", "-r"], stdout=f)
last_build_manifest = ET.parse(build_manifest_filename)
build_element = last_build_manifest.find("./project[@name='build']")
insert_child_annot(build_element, "BLD_NUM", str(BLD_NUM))
insert_child_annot(build_element, "PRODUCT", PRODUCT)
insert_child_annot(build_element, "PRODUCT_BRANCH", PRODUCT_BRANCH)
insert_child_annot(build_element, "RELEASE", RELEASE)
last_build_manifest.write(build_manifest_filename)

# Compute the commit message - dates in python are a bit hard
now = datetime.now()
tz = time.tzname[time.localtime().tm_isdst]
commit_msg = "{} {} '{}' build {}-{}\n\n{} {}{}".format(
  PRODUCT, RELEASE, PRODUCT_BRANCH, VERSION, BLD_NUM,
  now.strftime("%Y/%m/%d %H:%M:%S"), tz,
  "" if branch_exists == 0 else " (first branch build)")

# Finally, push the new build manifest back to GitHub
os.chdir("../build-team-manifests")
check_call(["git", "add", build_manifest_filename])
check_call(["git", "commit", "-m", commit_msg])
if not NO_PUSH:
  check_call(["git", "push", "origin",
    "{0}:refs/heads/{0}".format(PRODUCT_BRANCH)])

# Save the build manifest, current source tarball, and all computed
# properties with consistent names in top-level directory
os.chdir("..")
print "Saving build manifest..."
shutil.copy(build_manifest_filename, manifest_filename)
# Also keep a copy of this build manifest in the tarball
shutil.copy(build_manifest_filename, "{}/manifest.xml".format(PRODUCT))

print "Saving build parameters..."
properties = {
  "PRODUCT": PRODUCT,
  "RELEASE": RELEASE,
  "PRODUCT_BRANCH": PRODUCT_BRANCH,
  "VERSION": VERSION,
  "BLD_NUM": BLD_NUM,
  "MANIFEST": MANIFEST,
  "PARENT": PARENT,
  "TYPE": TYPE,
  "FORCE": force
}
with open(json_filename, "w") as prop:
  json.dump(properties, prop, indent=2, separators=(',', ': '))
with open(properties_filename, "w") as prop:
  prop.write("PRODUCT={PRODUCT}\nRELEASE={RELEASE}\nPRODUCT_BRANCH={PRODUCT_BRANCH}\nVERSION={VERSION}\nBLD_NUM={BLD_NUM}\nMANIFEST={MANIFEST}\nPARENT={PARENT}\nTYPE={TYPE}\nFORCE={FORCE}\n".format(**properties))

print "Creating source tarball..."
KEEP_GIT=manifest_config.get("keep_git", False)
with tarfile.open(tarball_filename, "w:gz") as tar:
  os.chdir(PRODUCT)
  for root, dirs, files in os.walk("."):
    for name in files:
      tar.add(os.path.join(root, name)[2:])
    for name in dirs:
      if KEEP_GIT == False and (name == ".repo" or name == ".git"):
        dirs.remove(name)
      else:
        tar.add(os.path.join(root, name)[2:], recursive=False)

